---
layout: post
title:  "PSAL"
date:   2013-12-16
categories: PowerShell 
---

President's Day presented a long weekend for me this last weekend.  I had already done everything around the house that needed to be done, so I wanted to persue a coding project.  See if I could get a projects started and completed in a single weekend.  Well, plus one day given the holiday.  This idea came to me while working on some PowerShell scripts.  Those scripts were calling cmdlets (pronounced *command let*) that I would consider critical and that I did not want ran every time I tested the script.  Cmdlets that would send e-mails, or access Ftp servers.  An immediate solution would be to abstract those cmdlets, and set a switch to determine if the abstractions were calling the base cmdlets or not.  I did that and it seemed to work.  So, why not setup a small framework to allow this abstraction to happen in a little more automatic fashion.

What came out of this is [PSAL](http://mitchelldavis.github.io/PSAL/)-*PowerShell Abstraction Layer*.  This is a simple module that, once imported, has a few cmdlets that can be used to interact with an abstraction layer.

- `Disable-AbstractionLayer`: This cmdlets will turn off the abstraction layer.  By default it is already turned off.
- `Enable-AbstractionLayer`: This cmdlet will turn on the abstraction layer.
- `New-Abstraction`: This cmdlet is the meat of the module.  With this you can 
